{"version":3,"file":"component---src-pages-blog-tsx-eac124fb4d4ef52a733f.js","mappings":"8KAsCA,UA/BuDA,IAAc,IAAb,KAAEC,GAAMD,EAC9D,MAAME,EAAYD,EAAKE,OAAOC,MAE9B,OACEC,EAAAA,cAACC,EAAAA,GAAM,CAACC,MAAM,QACZF,EAAAA,cAACG,EAAAA,EAAU,CAACC,QAAS,CAAC,EAAG,EAAG,GAAIC,IAAK,GAClCR,EAAUS,KAAKC,IAAS,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EACvB,OACElB,EAAAA,cAACmB,EAAAA,GAAQ,CACPC,IAAKb,EAAKc,GACVC,IAAe,QAAXd,EAAAD,EAAKgB,cAAM,IAAAf,OAAA,EAAXA,EAAagB,OAAQ,GACzBtB,OAAuB,QAAhBO,EAAAF,EAAKkB,mBAAW,IAAAhB,OAAA,EAAhBA,EAAkBP,SAAoB,QAAfQ,EAAIH,EAAKgB,cAAM,IAAAb,OAAA,EAAXA,EAAac,MAC/CE,OAAwB,QAAlBf,EAAEJ,EAAKkB,mBAAW,IAAAd,OAAA,EAAhBA,EAAkBgB,KAC1BC,OACkB,QAAhBhB,EAAAL,EAAKkB,mBAAW,IAAAb,GAAgB,QAAhBC,EAAhBD,EAAkBiB,sBAAc,IAAAhB,GAAiB,QAAjBC,EAAhCD,EAAkCiB,uBAAe,IAAAhB,OAAjC,EAAhBA,EAAmDiB,mBACnC,QADkDhB,EAClER,EAAKkB,mBAAW,IAAAV,GAAe,QAAfC,EAAhBD,EAAkBiB,qBAAa,IAAAhB,GAAiB,QAAjBC,EAA/BD,EAAiCc,uBAAe,IAAAb,OAAhC,EAAhBA,EAAkDc,kBAGpD/B,EAAAA,cAACiC,EAAAA,EAAI,CACHC,wBAAyB,CACvBC,QAAwB,QAAhBjB,EAAAX,EAAKkB,mBAAW,IAAAP,OAAA,EAAhBA,EAAkBkB,cAAe7B,EAAK8B,SAAW,MAGpD,KAIV,C,6GC5Bb,MAAMC,GAAO,IAAAC,aACX,SAAeC,EAAOC,GACpB,MAAM,cACJC,EAAa,OACbC,EAAM,IACNC,EAAG,SACHC,EAAQ,SACRC,EAAQ,aACRC,EAAY,YACZC,EAAW,gBACXC,EAAe,OACfC,KACGC,GACDX,EACJ,OAAuB,IAAAY,KACrB,IAAOC,IACP,IACKF,EACHV,MACAa,IAAK,CACH,CACEC,QAASL,EAAS,cAAgB,OAClCM,kBAAmBd,EACnBe,gBAAiBT,EACjBU,WAAYf,EACZgB,QAASf,EACTgB,aAAcf,EACdgB,aAAcf,EACdgB,iBAAkBf,EAClBgB,oBAAqBd,GAEvBT,EAAMc,MAId,ICjCInD,GAAa,IAAAoC,aACjB,SAAqBC,EAAOC,GAC1B,MAAM,QAAErC,EAAO,cAAE4D,KAAkBb,GAASX,EACtCyB,GAAM,SACNhB,EAAkBe,EAO5B,SAAwBE,EAAOD,GAC7B,OAAO,OAAUC,GAAQC,IACvB,MAAMC,EAASH,EAAII,OAAOC,OAAO,SAASH,IAJxB,iBADRI,EAK8CJ,GAJ3B,GAAGI,MAAQA,GAD5C,IAAcA,EAMV,OAAiB,OAAVJ,EAAiB,KAAO,2BAA2BC,UAAe,GAE7E,CAZ4CI,CAAeR,EAAeC,IAalDQ,EAbwErE,GAcvF,OACLqE,GACCN,GAAoB,OAAVA,EAAiB,KAAO,UAAUA,wBAHjD,IAAwBM,EAZpB,OAAuB,IAAArB,KAAId,EAAM,CAAEG,MAAKQ,qBAAoBE,GAC9D,G","sources":["webpack://lloreggia-ch/./src/pages/blog.tsx","webpack://lloreggia-ch/./node_modules/@chakra-ui/react/dist/esm/components/grid/grid.js","webpack://lloreggia-ch/./node_modules/@chakra-ui/react/dist/esm/components/grid/simple-grid.js"],"sourcesContent":["import React, { FC } from \"react\";\r\nimport { graphql, PageProps } from \"gatsby\";\r\nimport { SimpleGrid, Text } from \"@chakra-ui/react\";\r\n\r\nimport { Layout } from \"../components/layout\";\r\nimport { LinkCard } from \"../components/ui\";\r\n\r\nconst BlogPage: FC<PageProps<Queries.BlogPageQuery>> = ({ data }) => {\r\n  const blogPosts = data.allMdx.nodes;\r\n\r\n  return (\r\n    <Layout title=\"Blog\">\r\n      <SimpleGrid columns={[1, 2, 3]} gap={4}>\r\n        {blogPosts.map((post) => {\r\n          return (\r\n            <LinkCard\r\n              key={post.id}\r\n              to={post.fields?.slug || \"\"}\r\n              title={post.frontmatter?.title || post.fields?.slug}\r\n              footer={post.frontmatter?.date}\r\n              image={\r\n                post.frontmatter?.thumbnailImage?.childImageSharp?.gatsbyImageData ||\r\n                post.frontmatter?.featuredImage?.childImageSharp?.gatsbyImageData\r\n              }\r\n            >\r\n              <Text\r\n                dangerouslySetInnerHTML={{\r\n                  __html: post.frontmatter?.description || post.excerpt || \"\",\r\n                }}\r\n              />\r\n            </LinkCard>\r\n          );\r\n        })}\r\n      </SimpleGrid>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default BlogPage;\r\n\r\nexport const pageQuery = graphql`\r\n  query BlogPage {\r\n    allMdx(sort: { frontmatter: { date: DESC } }, filter: { internal: { contentFilePath: { regex: \"//content/blog/.+/\" } } }) {\r\n      nodes {\r\n        id\r\n        excerpt\r\n        fields {\r\n          slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"MMMM DD, YYYY\")\r\n          title\r\n          description\r\n          slug\r\n          featuredImage {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 300)\r\n            }\r\n          }\r\n          thumbnailImage {\r\n            childImageSharp {\r\n              gatsbyImageData(width: 300)\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n`;\r\n","\"use strict\";\n\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { chakra } from '../../styled-system/factory.js';\n\nconst Grid = forwardRef(\n  function Grid2(props, ref) {\n    const {\n      templateAreas,\n      column,\n      row,\n      autoFlow,\n      autoRows,\n      templateRows,\n      autoColumns,\n      templateColumns,\n      inline,\n      ...rest\n    } = props;\n    return /* @__PURE__ */ jsx(\n      chakra.div,\n      {\n        ...rest,\n        ref,\n        css: [\n          {\n            display: inline ? \"inline-grid\" : \"grid\",\n            gridTemplateAreas: templateAreas,\n            gridAutoColumns: autoColumns,\n            gridColumn: column,\n            gridRow: row,\n            gridAutoFlow: autoFlow,\n            gridAutoRows: autoRows,\n            gridTemplateRows: templateRows,\n            gridTemplateColumns: templateColumns\n          },\n          props.css\n        ]\n      }\n    );\n  }\n);\n\nexport { Grid };\n","\"use strict\";\n\"use client\";\nimport { jsx } from 'react/jsx-runtime';\nimport { forwardRef } from 'react';\nimport { mapObject } from '../../utils/walk-object.js';\nimport { useChakraContext } from '../../styled-system/provider.js';\nimport { Grid } from './grid.js';\n\nconst SimpleGrid = forwardRef(\n  function SimpleGrid2(props, ref) {\n    const { columns, minChildWidth, ...rest } = props;\n    const sys = useChakraContext();\n    const templateColumns = minChildWidth ? widthToColumns(minChildWidth, sys) : countToColumns(columns);\n    return /* @__PURE__ */ jsx(Grid, { ref, templateColumns, ...rest });\n  }\n);\nfunction toPx(n) {\n  return typeof n === \"number\" ? `${n}px` : n;\n}\nfunction widthToColumns(width, sys) {\n  return mapObject(width, (value) => {\n    const _value = sys.tokens.getVar(`sizes.${value}`, toPx(value));\n    return value === null ? null : `repeat(auto-fit, minmax(${_value}, 1fr))`;\n  });\n}\nfunction countToColumns(count) {\n  return mapObject(\n    count,\n    (value) => value === null ? null : `repeat(${value}, minmax(0, 1fr))`\n  );\n}\n\nexport { SimpleGrid };\n"],"names":["_ref","data","blogPosts","allMdx","nodes","React","Layout","title","SimpleGrid","columns","gap","map","post","_post$fields","_post$frontmatter","_post$fields2","_post$frontmatter2","_post$frontmatter3","_post$frontmatter3$th","_post$frontmatter3$th2","_post$frontmatter4","_post$frontmatter4$fe","_post$frontmatter4$fe2","_post$frontmatter5","LinkCard","key","id","to","fields","slug","frontmatter","footer","date","image","thumbnailImage","childImageSharp","gatsbyImageData","featuredImage","Text","dangerouslySetInnerHTML","__html","description","excerpt","Grid","forwardRef","props","ref","templateAreas","column","row","autoFlow","autoRows","templateRows","autoColumns","templateColumns","inline","rest","jsx","div","css","display","gridTemplateAreas","gridAutoColumns","gridColumn","gridRow","gridAutoFlow","gridAutoRows","gridTemplateRows","gridTemplateColumns","minChildWidth","sys","width","value","_value","tokens","getVar","n","widthToColumns","count"],"sourceRoot":""}